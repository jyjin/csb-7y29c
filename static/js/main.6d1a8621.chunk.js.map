{"version":3,"sources":["ImagePreviewer.js","App.js","index.js"],"names":["ImagePreviewer","props","options","hide","toolbar","ref","this","setRef","style","display","urls","map","src","alt","Component","App","viewer","getViewer","view","node","className","onClick","bind","React","rootElement","document","getElementById","ReactDOM","render"],"mappings":"oPAWqBA,E,kDACnB,WAAYC,GAAQ,uCACZA,G,0CAQR,WAKE,OACE,8BAEE,cAAC,IAAD,CACEC,QARU,CACdC,KAAM,GACNC,QAAS,GAOLC,IAAKC,KAAKL,MAAMM,OAChBC,MAAO,CAAEC,QAAS,QAHpB,SAMGH,KAAKL,MAAMS,KAAKC,KAAI,SAACC,GACpB,OAEE,aADA,CACA,OAAKA,IAAKA,EAAKC,IAAI,gB,GA3BWC,aCNvBC,E,kDACnB,aAAe,IAAD,8BACZ,gBACKL,KAAO,CAAC,SAAU,UAFX,E,2CAKd,WACqBJ,KAAKU,OAAOC,YAAvBD,OACDE,KAAK,K,oBAGd,SAAOC,GACLb,KAAKU,OAASG,I,oBAGhB,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,mDACA,oBAAIC,QAASf,KAAKe,QAAQC,KAAKhB,MAA/B,qDAGA,cAAC,EAAD,CAAgBI,KAAMJ,KAAKI,KAAMH,OAAQD,KAAKC,OAAOe,KAAKhB,e,GAtBjCiB,IAAMT,WCAjCU,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFJ,K","file":"static/js/main.6d1a8621.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport RcViewer from \"@hanyk/rc-viewer\";\n\n/**\n * A simple button, with a possibility to be used as a file upload button\n *\n * @param {object} buttons The list of buttons to display (object with a label and a payload)\n * @param {function} onButtonClicked Called when the button is clicked with the label and the payload\n * @param {function} onFileUpload This is called when a file is uploaded\n */\nexport default class ImagePreviewer extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  // show() {\n  //   const { viewer } = this.refs.viewer.getViewer();\n  //   viewer.view(1);\n  // }\n\n  render() {\n    const options = {\n      hide: {},\n      toolbar: 0\n    };\n    return (\n      <div>\n        {/* <div onClick={this.show.bind(this)}>测试</div> */}\n        <RcViewer\n          options={options}\n          ref={this.props.setRef}\n          style={{ display: \"none\" }}\n        >\n          {/* <ul id=\"images\"> */}\n          {this.props.urls.map((src) => {\n            return (\n              // <li key={\"img\" + src}>\n              <img src={src} alt=\"\" />\n              // </li>\n            );\n          })}\n          {/* </ul> */}\n        </RcViewer>\n      </div>\n    );\n  }\n}\n","import \"./styles.css\";\nimport React from \"react\";\nimport ImagePreviewer from \"./ImagePreviewer\";\nimport { render } from \"react-dom\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.urls = [\"/1.jpg\", \"/2.jpg\"];\n  }\n\n  onClick() {\n    const { viewer } = this.viewer.getViewer();\n    viewer.view(1);\n  }\n\n  setRef(node) {\n    this.viewer = node;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Hello CodeSandbox</h1>\n        <h2 onClick={this.onClick.bind(this)}>\n          Start editing to see some magic happen!\n        </h2>\n        <ImagePreviewer urls={this.urls} setRef={this.setRef.bind(this)} />\n      </div>\n    );\n  }\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}